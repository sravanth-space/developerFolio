{
  "status": "ok",
  "feed": {
    "url": "https://blogs.sravanth.co.uk/rss.xml",
    "title": "Sravanth Baratam",
    "link": "https://blogs.sravanth.co.uk/",
    "author": "",
    "description": "Sravanth Baratam",
    "image": "https://cdn.hashnode.com/res/hashnode/image/upload/v1679602690488/6QS8zzBXJ.png"
  },
  "items": [
    {
      "title": "React Hooks part 1",
      "pubDate": "2023-03-24 16:49:13",
      "link": "https://blogs.sravanth.co.uk/react-hooks-part-1",
      "guid": "https://blogs.sravanth.co.uk/react-hooks-part-1",
      "author": "Sravanth Baratam",
      "thumbnail": "",
      "description": "\n<h1>useState and useEffect</h1>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n<span class=\"hljs-keyword\">import</span> { useState, useEffect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">WindowSizeList</span>(<span class=\"hljs-params\">{ url }</span>) </span>{\n    <span class=\"hljs-keyword\">const</span> [windowWidth, setWindowWidth] = useState(<span class=\"hljs-built_in\">window</span>.innerWidth)\n    <span class=\"hljs-keyword\">const</span> [items, setItems] = useState([])\n\n    <span class=\"hljs-keyword\">const</span> updateWindowWidth = <span class=\"hljs-function\">() =&gt;</span> {\n        setWindowWidth(<span class=\"hljs-built_in\">window</span>.innerWidth)\n    }\n\n    useEffect(<span class=\"hljs-function\">() =&gt;</span> {\n        setItems([<span class=\"hljs-string\">\"abcd\"</span>])\n    }, [url])\n\n    useEffect(<span class=\"hljs-function\">() =&gt;</span> {\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'This is my side effect'</span>)\n        <span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">'resize'</span>, updateWindowWidth)\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =&gt;</span> {\n            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'This is my clean up'</span>)  \n            <span class=\"hljs-built_in\">window</span>.removeEventListener(<span class=\"hljs-string\">'resize'</span>, updateWindowWidth)\n        }\n    }, [])\n\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>Window Width: {windowWidth}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n            {items.map(item =&gt; {\n                return <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{item}</span>&gt;</span>{item}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n            })}\n        <span class=\"hljs-tag\">&lt;/&gt;</span></span>\n    )\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> WindowSizeList\n</code></pre>\n<p>The first <code>useState</code> hook sets up a state variable called <code>windowWidth</code> and initializes it to the current width of the window using the <code>window.innerWidth</code> property. The second <code>useState</code> hook initializes an empty array called <code>items</code>.</p>\n<p>The <code>updateWindowWidth</code> function is used to update the <code>windowWidth</code> state variable whenever the window is resized. This function is called by an event listener attached to the window in the second <code>useEffect</code> hook.</p>\n<p>The first <code>useEffect</code> hook sets the <code>items</code> state variable to an array containing a single string \"abcd\". This effect is only executed when the <code>url</code> prop changes.</p>\n<p>The second <code>useEffect</code> hook is responsible for attaching and removing the event listener for window resizing. The effect function adds an event listener to the <code>resize</code> event of the window, and returns a cleanup function that removes the event listener when the component unmounts. The <code>[]</code> dependency array passed as the second argument to this <code>useEffect</code> hook ensures that the effect is only executed once when the component mounts.</p>\n<p>Finally, the component returns a JSX fragment that renders the current window width and a list of items, with each item rendered as a <code>&lt;div&gt;</code> element with a unique <code>key</code> prop.</p>\n<p>Overall, this component demonstrates how the <code>useState</code> and <code>useEffect</code> hooks can be used to manage state and side effects in a React component. It also shows how to attach and remove event listeners using the <code>useEffect</code> hook.</p>\n<hr>\n<h1>useContext</h1>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>\n<span class=\"hljs-keyword\">import</span> { useState, useContext } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>\n<span class=\"hljs-comment\">//context</span>\n<span class=\"hljs-keyword\">const</span> ThemeContext = React.createContext()\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">App</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">const</span> [theme, setTheme] = useState(<span class=\"hljs-string\">'dark'</span>)\n\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"hljs-comment\">// provider with obj with props theme and setTheme</span>\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ThemeContext.Provider</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">theme</span>, <span class=\"hljs-attr\">setTheme</span> }}&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ChildComponent</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ThemeContext.Provider</span>&gt;</span></span>\n    )\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">ChildComponent</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">GrandChildComponent</span> /&gt;</span></span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">GrandChildComponent</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">const</span> { theme, setTheme } = useContext(ThemeContext)\n\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>The theme is {theme}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> setTheme('light')}&gt;\n                Change To Light Theme\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/&gt;</span></span>\n    )\n}\n</code></pre>\n<p>The first step is to create a context object using the createContext() function from the React library. This creates a new context object that can be used to pass data down to child components.</p>\n<p>The App component is the parent component and contains the state variable \"theme\" which is initialized to 'dark' using the useState() hook from the React library. The App component also provides a child component, ChildComponent, with access to the theme state by wrapping it in the ThemeContext.Provider component.</p>\n<p>The ChildComponent is a simple component that renders a GrandChildComponent.</p>\n<p>The GrandChildComponent uses the useContext() hook from the React library to access the \"theme\" and \"setTheme\" variables from the context. It then renders a div that displays the current theme value and a button that changes the theme to \"light\" when clicked.</p>\n<p>Overall, this code shows how to use the React Context API to share state between components without the need for passing props down the component tree. It also demonstrates the power of the useContext() hook to access context values within child components.</p>\n",
      "content": "\n<h1>useState and useEffect</h1>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n<span class=\"hljs-keyword\">import</span> { useState, useEffect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">WindowSizeList</span>(<span class=\"hljs-params\">{ url }</span>) </span>{\n    <span class=\"hljs-keyword\">const</span> [windowWidth, setWindowWidth] = useState(<span class=\"hljs-built_in\">window</span>.innerWidth)\n    <span class=\"hljs-keyword\">const</span> [items, setItems] = useState([])\n\n    <span class=\"hljs-keyword\">const</span> updateWindowWidth = <span class=\"hljs-function\">() =&gt;</span> {\n        setWindowWidth(<span class=\"hljs-built_in\">window</span>.innerWidth)\n    }\n\n    useEffect(<span class=\"hljs-function\">() =&gt;</span> {\n        setItems([<span class=\"hljs-string\">\"abcd\"</span>])\n    }, [url])\n\n    useEffect(<span class=\"hljs-function\">() =&gt;</span> {\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'This is my side effect'</span>)\n        <span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">'resize'</span>, updateWindowWidth)\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =&gt;</span> {\n            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'This is my clean up'</span>)  \n            <span class=\"hljs-built_in\">window</span>.removeEventListener(<span class=\"hljs-string\">'resize'</span>, updateWindowWidth)\n        }\n    }, [])\n\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>Window Width: {windowWidth}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n            {items.map(item =&gt; {\n                return <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{item}</span>&gt;</span>{item}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n            })}\n        <span class=\"hljs-tag\">&lt;/&gt;</span></span>\n    )\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> WindowSizeList\n</code></pre>\n<p>The first <code>useState</code> hook sets up a state variable called <code>windowWidth</code> and initializes it to the current width of the window using the <code>window.innerWidth</code> property. The second <code>useState</code> hook initializes an empty array called <code>items</code>.</p>\n<p>The <code>updateWindowWidth</code> function is used to update the <code>windowWidth</code> state variable whenever the window is resized. This function is called by an event listener attached to the window in the second <code>useEffect</code> hook.</p>\n<p>The first <code>useEffect</code> hook sets the <code>items</code> state variable to an array containing a single string \"abcd\". This effect is only executed when the <code>url</code> prop changes.</p>\n<p>The second <code>useEffect</code> hook is responsible for attaching and removing the event listener for window resizing. The effect function adds an event listener to the <code>resize</code> event of the window, and returns a cleanup function that removes the event listener when the component unmounts. The <code>[]</code> dependency array passed as the second argument to this <code>useEffect</code> hook ensures that the effect is only executed once when the component mounts.</p>\n<p>Finally, the component returns a JSX fragment that renders the current window width and a list of items, with each item rendered as a <code>&lt;div&gt;</code> element with a unique <code>key</code> prop.</p>\n<p>Overall, this component demonstrates how the <code>useState</code> and <code>useEffect</code> hooks can be used to manage state and side effects in a React component. It also shows how to attach and remove event listeners using the <code>useEffect</code> hook.</p>\n<hr>\n<h1>useContext</h1>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>\n<span class=\"hljs-keyword\">import</span> { useState, useContext } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>\n<span class=\"hljs-comment\">//context</span>\n<span class=\"hljs-keyword\">const</span> ThemeContext = React.createContext()\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">App</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">const</span> [theme, setTheme] = useState(<span class=\"hljs-string\">'dark'</span>)\n\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"hljs-comment\">// provider with obj with props theme and setTheme</span>\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ThemeContext.Provider</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">theme</span>, <span class=\"hljs-attr\">setTheme</span> }}&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ChildComponent</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ThemeContext.Provider</span>&gt;</span></span>\n    )\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">ChildComponent</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">GrandChildComponent</span> /&gt;</span></span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">GrandChildComponent</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">const</span> { theme, setTheme } = useContext(ThemeContext)\n\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>The theme is {theme}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> setTheme('light')}&gt;\n                Change To Light Theme\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/&gt;</span></span>\n    )\n}\n</code></pre>\n<p>The first step is to create a context object using the createContext() function from the React library. This creates a new context object that can be used to pass data down to child components.</p>\n<p>The App component is the parent component and contains the state variable \"theme\" which is initialized to 'dark' using the useState() hook from the React library. The App component also provides a child component, ChildComponent, with access to the theme state by wrapping it in the ThemeContext.Provider component.</p>\n<p>The ChildComponent is a simple component that renders a GrandChildComponent.</p>\n<p>The GrandChildComponent uses the useContext() hook from the React library to access the \"theme\" and \"setTheme\" variables from the context. It then renders a div that displays the current theme value and a button that changes the theme to \"light\" when clicked.</p>\n<p>Overall, this code shows how to use the React Context API to share state between components without the need for passing props down the component tree. It also demonstrates the power of the useContext() hook to access context values within child components.</p>\n",
      "enclosure": {},
      "categories": []
    },
    {
      "title": "JS Mini Challenges Week 1",
      "pubDate": "2023-03-23 23:15:25",
      "link": "https://blogs.sravanth.co.uk/js-mini-challenges-week-1",
      "guid": "https://blogs.sravanth.co.uk/js-mini-challenges-week-1",
      "author": "Sravanth Baratam",
      "thumbnail": "",
      "description": "\n<h3>Guess the outputs without executing the code</h3>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-keyword\">var</span> args = <span class=\"hljs-built_in\">Array</span>.prototype.slice.call(<span class=\"hljs-built_in\">arguments</span>);\n    <span class=\"hljs-built_in\">console</span>.log(args[<span class=\"hljs-number\">1</span>])\n}\nfoo(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">4</span>) <span class=\"hljs-comment\">//?</span>\n</code></pre>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">const</span> obj1 = {\n    <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">5</span>,\n    <span class=\"hljs-attr\">b</span>: {\n        <span class=\"hljs-attr\">c</span>: <span class=\"hljs-number\">6</span>\n    }\n}\n\n<span class=\"hljs-keyword\">const</span> obj2 = <span class=\"hljs-built_in\">Object</span>.assign({}, obj1)\n<span class=\"hljs-keyword\">const</span> obj3 = { ...obj1 }\nobj1.b.c = <span class=\"hljs-number\">8</span>\n<span class=\"hljs-built_in\">console</span>.log(obj2)  <span class=\"hljs-comment\">//?</span>\n<span class=\"hljs-built_in\">console</span>.log(obj3)  <span class=\"hljs-comment\">//?</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.assign({}, obj1, obj2, obj3)) <span class=\"hljs-comment\">//?</span>\n</code></pre>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-literal\">null</span> == <span class=\"hljs-literal\">undefined</span>) <span class=\"hljs-comment\">//?</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-literal\">null</span> === <span class=\"hljs-literal\">undefined</span>) <span class=\"hljs-comment\">//?</span>\n</code></pre>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">var</span> power = <span class=\"hljs-string\">\"100\"</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getPowerNumber</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">var</span> power = <span class=\"hljs-string\">\"10\"</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">f</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> power\n    }\n    <span class=\"hljs-keyword\">return</span> f\n}\n<span class=\"hljs-built_in\">console</span>.log(getPowerNumber()()) <span class=\"hljs-comment\">//?</span>\n</code></pre>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">var</span> obj = { <span class=\"hljs-attr\">hasOwnProperty</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">foo</span>: <span class=\"hljs-number\">2</span> }\n<span class=\"hljs-built_in\">console</span>.log(obj.hasOwnProperty(<span class=\"hljs-string\">'foo'</span>)) <span class=\"hljs-comment\">//?</span>\n</code></pre>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">person</span>(<span class=\"hljs-params\">id, name</span>) </span>{\n    <span class=\"hljs-keyword\">var</span> id = id\n    <span class=\"hljs-keyword\">var</span> name = name\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">student</span>(<span class=\"hljs-params\">id, name</span>) </span>{\n    person.call(<span class=\"hljs-built_in\">this</span>, id, name)\n}\n\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> student(<span class=\"hljs-number\">50</span>, <span class=\"hljs-string\">\"Sravanth\"</span>).id);<span class=\"hljs-comment\">//?</span>\n</code></pre>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Boolean</span>(<span class=\"hljs-string\">\"false\"</span>) === <span class=\"hljs-built_in\">Boolean</span>(<span class=\"hljs-literal\">false</span>)); <span class=\"hljs-comment\">//?</span>\n</code></pre>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">let</span> foo = <span class=\"hljs-function\">(<span class=\"hljs-params\">a = <span class=\"hljs-number\">3</span>, b = <span class=\"hljs-number\">5</span></span>) =&gt;</span> {\n    <span class=\"hljs-built_in\">console</span>.log(a + b);\n}\n\nfoo(<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">4</span>) <span class=\"hljs-comment\">//?</span>\n</code></pre>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(a); <span class=\"hljs-comment\">//?</span>\n    <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">4</span>;\n    <span class=\"hljs-built_in\">console</span>.log(a); <span class=\"hljs-comment\">//?</span>\n}\n\nfoo()\n</code></pre>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(a); <span class=\"hljs-comment\">//?</span>\n    <span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-number\">4</span>;\n    <span class=\"hljs-built_in\">console</span>.log(a); <span class=\"hljs-comment\">//?</span>\n}\n\nfoo()\n</code></pre>\n",
      "content": "\n<h3>Guess the outputs without executing the code</h3>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-keyword\">var</span> args = <span class=\"hljs-built_in\">Array</span>.prototype.slice.call(<span class=\"hljs-built_in\">arguments</span>);\n    <span class=\"hljs-built_in\">console</span>.log(args[<span class=\"hljs-number\">1</span>])\n}\nfoo(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">4</span>) <span class=\"hljs-comment\">//?</span>\n</code></pre>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">const</span> obj1 = {\n    <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">5</span>,\n    <span class=\"hljs-attr\">b</span>: {\n        <span class=\"hljs-attr\">c</span>: <span class=\"hljs-number\">6</span>\n    }\n}\n\n<span class=\"hljs-keyword\">const</span> obj2 = <span class=\"hljs-built_in\">Object</span>.assign({}, obj1)\n<span class=\"hljs-keyword\">const</span> obj3 = { ...obj1 }\nobj1.b.c = <span class=\"hljs-number\">8</span>\n<span class=\"hljs-built_in\">console</span>.log(obj2)  <span class=\"hljs-comment\">//?</span>\n<span class=\"hljs-built_in\">console</span>.log(obj3)  <span class=\"hljs-comment\">//?</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.assign({}, obj1, obj2, obj3)) <span class=\"hljs-comment\">//?</span>\n</code></pre>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-literal\">null</span> == <span class=\"hljs-literal\">undefined</span>) <span class=\"hljs-comment\">//?</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-literal\">null</span> === <span class=\"hljs-literal\">undefined</span>) <span class=\"hljs-comment\">//?</span>\n</code></pre>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">var</span> power = <span class=\"hljs-string\">\"100\"</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getPowerNumber</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">var</span> power = <span class=\"hljs-string\">\"10\"</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">f</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> power\n    }\n    <span class=\"hljs-keyword\">return</span> f\n}\n<span class=\"hljs-built_in\">console</span>.log(getPowerNumber()()) <span class=\"hljs-comment\">//?</span>\n</code></pre>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">var</span> obj = { <span class=\"hljs-attr\">hasOwnProperty</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">foo</span>: <span class=\"hljs-number\">2</span> }\n<span class=\"hljs-built_in\">console</span>.log(obj.hasOwnProperty(<span class=\"hljs-string\">'foo'</span>)) <span class=\"hljs-comment\">//?</span>\n</code></pre>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">person</span>(<span class=\"hljs-params\">id, name</span>) </span>{\n    <span class=\"hljs-keyword\">var</span> id = id\n    <span class=\"hljs-keyword\">var</span> name = name\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">student</span>(<span class=\"hljs-params\">id, name</span>) </span>{\n    person.call(<span class=\"hljs-built_in\">this</span>, id, name)\n}\n\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> student(<span class=\"hljs-number\">50</span>, <span class=\"hljs-string\">\"Sravanth\"</span>).id);<span class=\"hljs-comment\">//?</span>\n</code></pre>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Boolean</span>(<span class=\"hljs-string\">\"false\"</span>) === <span class=\"hljs-built_in\">Boolean</span>(<span class=\"hljs-literal\">false</span>)); <span class=\"hljs-comment\">//?</span>\n</code></pre>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">let</span> foo = <span class=\"hljs-function\">(<span class=\"hljs-params\">a = <span class=\"hljs-number\">3</span>, b = <span class=\"hljs-number\">5</span></span>) =&gt;</span> {\n    <span class=\"hljs-built_in\">console</span>.log(a + b);\n}\n\nfoo(<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">4</span>) <span class=\"hljs-comment\">//?</span>\n</code></pre>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(a); <span class=\"hljs-comment\">//?</span>\n    <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">4</span>;\n    <span class=\"hljs-built_in\">console</span>.log(a); <span class=\"hljs-comment\">//?</span>\n}\n\nfoo()\n</code></pre>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(a); <span class=\"hljs-comment\">//?</span>\n    <span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-number\">4</span>;\n    <span class=\"hljs-built_in\">console</span>.log(a); <span class=\"hljs-comment\">//?</span>\n}\n\nfoo()\n</code></pre>\n",
      "enclosure": {},
      "categories": []
    },
    {
      "title": "Things to remember about JavaScript ForEach Loop",
      "pubDate": "2023-03-22 15:47:01",
      "link": "https://blogs.sravanth.co.uk/things-to-remember-about-javascript-foreach-loop",
      "guid": "https://blogs.sravanth.co.uk/things-to-remember-about-javascript-foreach-loop",
      "author": "Sravanth Baratam",
      "thumbnail": "",
      "description": "\n<p><strong>Cant Skip an Iteration with \"Continue\"</strong></p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>]\n\narr.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">val</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (val === <span class=\"hljs-number\">3</span>) {\n        <span class=\"hljs-keyword\">continue</span>;\n    }\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"current: \"</span>, val)\n}\n)\n<span class=\"hljs-comment\">// SyntaxError: Unsyntactic continue</span>\n</code></pre>\n<p><strong>Cant End A Loop Early with \"Break\"</strong></p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>]\n\narr.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">val</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (val === <span class=\"hljs-number\">3</span>) {\n        <span class=\"hljs-keyword\">break</span>;\n    }\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"current: \"</span>, val)\n}\n)\n<span class=\"hljs-comment\">// SyntaxError: Unsyntactic break</span>\n</code></pre>\n<p><strong>Always Returns \"Undefined\"</strong></p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>]\n\narr.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">val</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (val === <span class=\"hljs-number\">3</span>) {\n        <span class=\"hljs-keyword\">return</span> val;\n    }\n}\n)\n<span class=\"hljs-comment\">//Undefined</span>\n</code></pre>\n",
      "content": "\n<p><strong>Cant Skip an Iteration with \"Continue\"</strong></p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>]\n\narr.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">val</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (val === <span class=\"hljs-number\">3</span>) {\n        <span class=\"hljs-keyword\">continue</span>;\n    }\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"current: \"</span>, val)\n}\n)\n<span class=\"hljs-comment\">// SyntaxError: Unsyntactic continue</span>\n</code></pre>\n<p><strong>Cant End A Loop Early with \"Break\"</strong></p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>]\n\narr.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">val</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (val === <span class=\"hljs-number\">3</span>) {\n        <span class=\"hljs-keyword\">break</span>;\n    }\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"current: \"</span>, val)\n}\n)\n<span class=\"hljs-comment\">// SyntaxError: Unsyntactic break</span>\n</code></pre>\n<p><strong>Always Returns \"Undefined\"</strong></p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>]\n\narr.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">val</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (val === <span class=\"hljs-number\">3</span>) {\n        <span class=\"hljs-keyword\">return</span> val;\n    }\n}\n)\n<span class=\"hljs-comment\">//Undefined</span>\n</code></pre>\n",
      "enclosure": {},
      "categories": []
    }
  ]
}
