{"status":"ok","feed":{"url":"https://blogs.sravanth.co.uk/rss.xml","title":"Sravanth Baratam","link":"https://blogs.sravanth.co.uk/","author":"","description":"Sravanth Baratam","image":"https://cdn.hashnode.com/res/hashnode/image/upload/v1679602690488/6QS8zzBXJ.png"},"items":[{"title":"CSS Snippets","pubDate":"2023-05-07 18:44:25","link":"https://blogs.sravanth.co.uk/css-snippets","guid":"https://blogs.sravanth.co.uk/css-snippets","author":"Sravanth Baratam","thumbnail":"","description":"\n<h2>Center a div</h2>\n<pre><code class=\"lang-xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">\"X-UA-Compatible\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"IE=edge\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Document<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n        <span class=\"hljs-selector-class\">.container</span> {\n            <span class=\"hljs-attribute\">font-family</span>: Arial, Helvetica, sans-serif;\n            <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">24px</span>;\n            <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">25px</span>;\n            <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">350px</span>;\n            <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">250px</span>;\n            <span class=\"hljs-attribute\">outline</span>: dashed <span class=\"hljs-number\">1px</span> black;\n        }\n\n        <span class=\"hljs-selector-tag\">p</span> {\n            <span class=\"hljs-attribute\">text-align</span>: center;\n        }\n    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"container\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Hello World!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<h2>Center an image</h2>\n<pre><code class=\"lang-xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">\"X-UA-Compatible\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"IE=edge\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Document<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n        <span class=\"hljs-selector-class\">.center</span> {\n            <span class=\"hljs-attribute\">display</span>: block;\n            <span class=\"hljs-attribute\">margin-left</span>: auto;\n            <span class=\"hljs-attribute\">margin-right</span>: auto;\n            <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">50%</span>;\n        }\n    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://image.shutterstock.com/image-photo/stock-photo-funny-british-shorthair-cat-portrait-looking-shocked-or-surprised-on-orange-background-with-copy-250nw-2097266809.jpg\"</span>\n        <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">\"\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"center\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<h2>Make text Responsive</h2>\n<pre><code class=\"lang-xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">\"X-UA-Compatible\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"IE=edge\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Document<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n        <span class=\"hljs-keyword\">@media</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">min-width:</span><span class=\"hljs-number\">601px</span>) {\n            <span class=\"hljs-selector-tag\">h1</span> {\n                <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">80px</span>;\n            }\n        }\n\n        <span class=\"hljs-keyword\">@media</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">max-width:</span><span class=\"hljs-number\">600px</span>) {\n            <span class=\"hljs-selector-tag\">h1</span> {\n                <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">30px</span>;\n            }\n        }\n    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Hello World<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<h2>Fade-in animation</h2>\n<pre><code class=\"lang-xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">\"X-UA-Compatible\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"IE=edge\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Document<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n        <span class=\"hljs-selector-class\">.fade</span> {\n            <span class=\"hljs-attribute\">opacity</span>: <span class=\"hljs-number\">0.5</span>;\n        }\n\n        <span class=\"hljs-selector-class\">.fade</span><span class=\"hljs-selector-pseudo\">:hover</span> {\n            <span class=\"hljs-attribute\">opacity</span>: <span class=\"hljs-number\">1</span>;\n        }\n    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"fade\"</span>&gt;</span>Hello, World !<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<hr>\n<div class=\"hn-table\">\n<table>\n<thead><tr><td><a target=\"_blank\" href=\"https://uiverse.io/buttons\">https://uiverse.io/buttons</a></td></tr></thead>\n<tbody>\n<tr><td><a target=\"_blank\" href=\"https://cubic-bezier.com/#.17,.67,.83,.67\">https://cubic-bezier.com/#.17,.67,.83,.67</a></td></tr>\n<tr><td><a target=\"_blank\" href=\"https://bgjar.com/\">https://bgjar.com/</a></td></tr>\n<tr><td><a target=\"_blank\" href=\"https://shadows.brumm.af/\">https://shadows.brumm.af/</a></td></tr>\n<tr><td><a target=\"_blank\" href=\"https://bennettfeely.com/clippy/\">https://bennettfeely.com/clippy/</a></td></tr>\n<tr><td><a target=\"_blank\" href=\"https://getwaves.io/\">https://getwaves.io/</a></td></tr>\n<tr><td><a target=\"_blank\" href=\"https://waitanimate.wstone.uk/\">https://waitanimate.wstone.uk/</a></td></tr>\n<tr><td><a target=\"_blank\" href=\"https://keyframes.app/\">https://keyframes.app/</a></td></tr>\n</tbody>\n</table>\n</div>\n","content":"\n<h2>Center a div</h2>\n<pre><code class=\"lang-xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">\"X-UA-Compatible\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"IE=edge\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Document<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n        <span class=\"hljs-selector-class\">.container</span> {\n            <span class=\"hljs-attribute\">font-family</span>: Arial, Helvetica, sans-serif;\n            <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">24px</span>;\n            <span class=\"hljs-attribute\">margin</span>: <span class=\"hljs-number\">25px</span>;\n            <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">350px</span>;\n            <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">250px</span>;\n            <span class=\"hljs-attribute\">outline</span>: dashed <span class=\"hljs-number\">1px</span> black;\n        }\n\n        <span class=\"hljs-selector-tag\">p</span> {\n            <span class=\"hljs-attribute\">text-align</span>: center;\n        }\n    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"container\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">p</span>&gt;</span>Hello World!<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">p</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<h2>Center an image</h2>\n<pre><code class=\"lang-xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">\"X-UA-Compatible\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"IE=edge\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Document<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n        <span class=\"hljs-selector-class\">.center</span> {\n            <span class=\"hljs-attribute\">display</span>: block;\n            <span class=\"hljs-attribute\">margin-left</span>: auto;\n            <span class=\"hljs-attribute\">margin-right</span>: auto;\n            <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">50%</span>;\n        }\n    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">img</span> <span class=\"hljs-attr\">src</span>=<span class=\"hljs-string\">\"https://image.shutterstock.com/image-photo/stock-photo-funny-british-shorthair-cat-portrait-looking-shocked-or-surprised-on-orange-background-with-copy-250nw-2097266809.jpg\"</span>\n        <span class=\"hljs-attr\">alt</span>=<span class=\"hljs-string\">\"\"</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"center\"</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<h2>Make text Responsive</h2>\n<pre><code class=\"lang-xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">\"X-UA-Compatible\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"IE=edge\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Document<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n        <span class=\"hljs-keyword\">@media</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">min-width:</span><span class=\"hljs-number\">601px</span>) {\n            <span class=\"hljs-selector-tag\">h1</span> {\n                <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">80px</span>;\n            }\n        }\n\n        <span class=\"hljs-keyword\">@media</span> screen <span class=\"hljs-keyword\">and</span> (<span class=\"hljs-attribute\">max-width:</span><span class=\"hljs-number\">600px</span>) {\n            <span class=\"hljs-selector-tag\">h1</span> {\n                <span class=\"hljs-attribute\">font-size</span>: <span class=\"hljs-number\">30px</span>;\n            }\n        }\n    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span>&gt;</span>Hello World<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<h2>Fade-in animation</h2>\n<pre><code class=\"lang-xml\"><span class=\"hljs-meta\">&lt;!DOCTYPE <span class=\"hljs-meta-keyword\">html</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">\"en\"</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">\"UTF-8\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">\"X-UA-Compatible\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"IE=edge\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">\"viewport\"</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">\"width=device-width, initial-scale=1.0\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Document<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n        <span class=\"hljs-selector-class\">.fade</span> {\n            <span class=\"hljs-attribute\">opacity</span>: <span class=\"hljs-number\">0.5</span>;\n        }\n\n        <span class=\"hljs-selector-class\">.fade</span><span class=\"hljs-selector-pseudo\">:hover</span> {\n            <span class=\"hljs-attribute\">opacity</span>: <span class=\"hljs-number\">1</span>;\n        }\n    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">h1</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"fade\"</span>&gt;</span>Hello, World !<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">h1</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n<hr>\n<div class=\"hn-table\">\n<table>\n<thead><tr><td><a target=\"_blank\" href=\"https://uiverse.io/buttons\">https://uiverse.io/buttons</a></td></tr></thead>\n<tbody>\n<tr><td><a target=\"_blank\" href=\"https://cubic-bezier.com/#.17,.67,.83,.67\">https://cubic-bezier.com/#.17,.67,.83,.67</a></td></tr>\n<tr><td><a target=\"_blank\" href=\"https://bgjar.com/\">https://bgjar.com/</a></td></tr>\n<tr><td><a target=\"_blank\" href=\"https://shadows.brumm.af/\">https://shadows.brumm.af/</a></td></tr>\n<tr><td><a target=\"_blank\" href=\"https://bennettfeely.com/clippy/\">https://bennettfeely.com/clippy/</a></td></tr>\n<tr><td><a target=\"_blank\" href=\"https://getwaves.io/\">https://getwaves.io/</a></td></tr>\n<tr><td><a target=\"_blank\" href=\"https://waitanimate.wstone.uk/\">https://waitanimate.wstone.uk/</a></td></tr>\n<tr><td><a target=\"_blank\" href=\"https://keyframes.app/\">https://keyframes.app/</a></td></tr>\n</tbody>\n</table>\n</div>\n","enclosure":{},"categories":[]},{"title":"Rules for Solving a Coding Question in an Interview","pubDate":"2023-05-06 19:01:08","link":"https://blogs.sravanth.co.uk/rules-for-solving-a-coding-question-in-an-interview","guid":"https://blogs.sravanth.co.uk/rules-for-solving-a-coding-question-in-an-interview","author":"Sravanth Baratam","thumbnail":"","description":"<ul>\n<li>\n<p>If we are dealing with <strong>top/maximum/minimum/closest</strong> 'K' elements among 'N' elements, we will be using a <strong>Heap</strong>.</p>\n</li>\n<li>\n<p>If the given input is a <strong>sorted array</strong> or a list, we will either be using <strong>Binary Search</strong> or the <strong>Two Pointers</strong> strategy.</p>\n</li>\n<li>\n<p>If we need to try all <strong>combinations</strong> (or permutations) of the input, we can either use <strong>Backtracking</strong> or <strong>Breadth First Search</strong>.</p>\n</li>\n<li>\n<p>Most of the questions related to Trees or Graphs can be solved either through <strong>Breadth First Search</strong> or <strong>Depth First Search</strong>.</p>\n</li>\n<li>\n<p>Every <strong>recursive</strong> solution can be converted to an <strong>iterative</strong> solution using a <strong>stack</strong>.</p>\n</li>\n<li>\n<p>For a problem involving arrays, if there exists a solution in <strong>O(n^2)</strong> time and <strong>O(1)</strong> space, there must exist two other solutions</p>\n<ul>\n<li>\n<p>Using a <strong>HashMap</strong> or <strong>Set</strong> for O(n) time and space.</p>\n</li>\n<li>\n<p>Using <strong>sorting</strong> for O(n.log n) time O(1) space.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>If a problem in asking for <strong>optimization</strong>(e.g. maximization or minimization), we will be using <strong>Dynamic Programming.</strong></p>\n</li>\n<li>\n<p>If we need to find some common <strong>substring</strong> among a set of strings, we will be using a <strong>HashMap</strong> or <strong>Trie</strong>.</p>\n</li>\n<li>\n<p>If we need to <strong>search/manipulate</strong> a bunch of strings then <strong>Trie</strong> will be the best data structure.</p>\n</li>\n<li>\n<p>If the problem is related to <strong>LinkedList</strong> and we can't use extra space, then use the <strong>Fast &amp; Slow Pointer</strong> approach.</p>\n</li>\n</ul>","content":"<ul>\n<li>\n<p>If we are dealing with <strong>top/maximum/minimum/closest</strong> 'K' elements among 'N' elements, we will be using a <strong>Heap</strong>.</p>\n</li>\n<li>\n<p>If the given input is a <strong>sorted array</strong> or a list, we will either be using <strong>Binary Search</strong> or the <strong>Two Pointers</strong> strategy.</p>\n</li>\n<li>\n<p>If we need to try all <strong>combinations</strong> (or permutations) of the input, we can either use <strong>Backtracking</strong> or <strong>Breadth First Search</strong>.</p>\n</li>\n<li>\n<p>Most of the questions related to Trees or Graphs can be solved either through <strong>Breadth First Search</strong> or <strong>Depth First Search</strong>.</p>\n</li>\n<li>\n<p>Every <strong>recursive</strong> solution can be converted to an <strong>iterative</strong> solution using a <strong>stack</strong>.</p>\n</li>\n<li>\n<p>For a problem involving arrays, if there exists a solution in <strong>O(n^2)</strong> time and <strong>O(1)</strong> space, there must exist two other solutions</p>\n<ul>\n<li>\n<p>Using a <strong>HashMap</strong> or <strong>Set</strong> for O(n) time and space.</p>\n</li>\n<li>\n<p>Using <strong>sorting</strong> for O(n.log n) time O(1) space.</p>\n</li>\n</ul>\n</li>\n<li>\n<p>If a problem in asking for <strong>optimization</strong>(e.g. maximization or minimization), we will be using <strong>Dynamic Programming.</strong></p>\n</li>\n<li>\n<p>If we need to find some common <strong>substring</strong> among a set of strings, we will be using a <strong>HashMap</strong> or <strong>Trie</strong>.</p>\n</li>\n<li>\n<p>If we need to <strong>search/manipulate</strong> a bunch of strings then <strong>Trie</strong> will be the best data structure.</p>\n</li>\n<li>\n<p>If the problem is related to <strong>LinkedList</strong> and we can't use extra space, then use the <strong>Fast &amp; Slow Pointer</strong> approach.</p>\n</li>\n</ul>","enclosure":{},"categories":[]},{"title":"Most Used Git Commands","pubDate":"2023-05-06 18:36:14","link":"https://blogs.sravanth.co.uk/most-used-git-commands","guid":"https://blogs.sravanth.co.uk/most-used-git-commands","author":"Sravanth Baratam","thumbnail":"","description":"\n<p>git init # initialize directory as git repository</p>\n<p>git clone curl&gt; # copying git repository from hosted url to local machine</p>\n<p>git status # show modified files in current directory</p>\n<p>git log # view your commit history</p>\n<p>git add -A # add changed files into your next commit (stage)</p>\n<p>git commit -m your message' # commit your changes</p>\n<p>git pull origin main # get up-to-date changes from the main branch</p>\n<p>git push origin main # push your changes to the main branch</p>\n<p>git branch # list all local branches on the machine</p>\n<p>git merge develop # will merge develop branch into the current</p>\n<p>git switch # To switch between the branches</p>\n<p>git branch &lt;branch-narne&gt; # will create new branch</p>\n<p>git checkout B # switch from current to B</p>\n<p>git branch -m B # will rename current branch to B</p>\n<p>git branch -d A # delete specified branch(A)</p>\n<p>git rm # remove file from project and stage removal</p>\n<p>git stash # save modified and staged changes</p>\n<ul>\n<li>\n<p>git stash list #It gives the list of stashed code, we get stash-id from it</p>\n</li>\n<li>\n<p>git stash apply # It will apply all those changes in your code, but it will not delete it from stash list</p>\n</li>\n<li>\n<p>git stash drop #It will remove the stash code of that stash-id</p>\n</li>\n<li>\n<p>git stash pop #It will bring all those changes in your code and delete it from stash list</p>\n</li>\n<li>\n<p>git stash clear #It will remove all stash code from the stash list NOTE: GIT uses SHA1 algo for hashing the files</p>\n</li>\n</ul>\n<p>git diff A B # show what is on A but not on B</p>\n<p>git rebase &lt;main&gt; # put commits of current branch ahead of main</p>\n<p>git revert # It will undo all changes made by that specific commit</p>\n<p>git reset # It will remove all the changes made by commits done after that commit id.</p>\n<ul>\n<li>git reset head hard It will reset all commits and have changes that master has</li>\n</ul>\n<p>git remote v # Gives the repo link</p>\n<hr>\n<p>pip3 install git-sim</p>\n<p>to visualise git cmds.</p>\n<hr>\n<p>Squashing the Commits</p>\n<p> git rebase -i HEAD ~</p>\n<p> Then pick the commit you want, and rest will be squash</p>\n<p> Then keep only commit message you want</p>\n<p> git push origin --force</p>\n<p>Resolving merge conflicts/ Rebase branch (2 ways)</p>\n<p> Method 1</p>\n<p>o git pull --rebase origin master</p>\n<p> Method 2</p>\n<p>o git fetch all</p>\n<p>o git rebase origin/master</p>\n<p> Below steps are same for both method</p>\n<p>o Resolve merge conflicts and save the file</p>\n<p>o git add .</p>\n<p>o git rebase --continue</p>\n<p> If still merge conflicts are coming resolve them and continue git add . and git rebase --continue, till all merge conflicts are resolved o git rebase abort  To abort the rebasing</p>\n<p>o git push origin --force Pro tip: Squash all commits, so that you can resolve merge conflicts in one go.</p>\n<p>Cherry Pick</p>\n<p> It is used when we want to apply commit changes from one branch to another branch.</p>\n<p> It is used for the bug fixes, where you want to apply that commit to fix the bug in multiple branches</p>\n<p> It used to duplicate the commit from one branch to another</p>\n<p> In one of the branch A, one commit is made to fix a bug</p>\n<p> Now in another branch B, you want that commit.</p>\n<p> With help of git log, get the commit id from Branch A, copy it</p>\n<p> Now go to branch B, in which you want that commit changes from A branch.</p>\n<p> git cherry-pick  It will commit and apply changes on branch B, from that commit.</p>\n<p> If you would like to make some further modifications,</p>\n<p> you can also instruct Git to only add the commit's changes to your Working Copy - without directly committing them:</p>\n<p> git cherry-pick --no-commit</p>\n","content":"\n<p>git init # initialize directory as git repository</p>\n<p>git clone curl&gt; # copying git repository from hosted url to local machine</p>\n<p>git status # show modified files in current directory</p>\n<p>git log # view your commit history</p>\n<p>git add -A # add changed files into your next commit (stage)</p>\n<p>git commit -m your message' # commit your changes</p>\n<p>git pull origin main # get up-to-date changes from the main branch</p>\n<p>git push origin main # push your changes to the main branch</p>\n<p>git branch # list all local branches on the machine</p>\n<p>git merge develop # will merge develop branch into the current</p>\n<p>git switch # To switch between the branches</p>\n<p>git branch &lt;branch-narne&gt; # will create new branch</p>\n<p>git checkout B # switch from current to B</p>\n<p>git branch -m B # will rename current branch to B</p>\n<p>git branch -d A # delete specified branch(A)</p>\n<p>git rm # remove file from project and stage removal</p>\n<p>git stash # save modified and staged changes</p>\n<ul>\n<li>\n<p>git stash list #It gives the list of stashed code, we get stash-id from it</p>\n</li>\n<li>\n<p>git stash apply # It will apply all those changes in your code, but it will not delete it from stash list</p>\n</li>\n<li>\n<p>git stash drop #It will remove the stash code of that stash-id</p>\n</li>\n<li>\n<p>git stash pop #It will bring all those changes in your code and delete it from stash list</p>\n</li>\n<li>\n<p>git stash clear #It will remove all stash code from the stash list NOTE: GIT uses SHA1 algo for hashing the files</p>\n</li>\n</ul>\n<p>git diff A B # show what is on A but not on B</p>\n<p>git rebase &lt;main&gt; # put commits of current branch ahead of main</p>\n<p>git revert # It will undo all changes made by that specific commit</p>\n<p>git reset # It will remove all the changes made by commits done after that commit id.</p>\n<ul>\n<li>git reset head hard It will reset all commits and have changes that master has</li>\n</ul>\n<p>git remote v # Gives the repo link</p>\n<hr>\n<p>pip3 install git-sim</p>\n<p>to visualise git cmds.</p>\n<hr>\n<p>Squashing the Commits</p>\n<p> git rebase -i HEAD ~</p>\n<p> Then pick the commit you want, and rest will be squash</p>\n<p> Then keep only commit message you want</p>\n<p> git push origin --force</p>\n<p>Resolving merge conflicts/ Rebase branch (2 ways)</p>\n<p> Method 1</p>\n<p>o git pull --rebase origin master</p>\n<p> Method 2</p>\n<p>o git fetch all</p>\n<p>o git rebase origin/master</p>\n<p> Below steps are same for both method</p>\n<p>o Resolve merge conflicts and save the file</p>\n<p>o git add .</p>\n<p>o git rebase --continue</p>\n<p> If still merge conflicts are coming resolve them and continue git add . and git rebase --continue, till all merge conflicts are resolved o git rebase abort  To abort the rebasing</p>\n<p>o git push origin --force Pro tip: Squash all commits, so that you can resolve merge conflicts in one go.</p>\n<p>Cherry Pick</p>\n<p> It is used when we want to apply commit changes from one branch to another branch.</p>\n<p> It is used for the bug fixes, where you want to apply that commit to fix the bug in multiple branches</p>\n<p> It used to duplicate the commit from one branch to another</p>\n<p> In one of the branch A, one commit is made to fix a bug</p>\n<p> Now in another branch B, you want that commit.</p>\n<p> With help of git log, get the commit id from Branch A, copy it</p>\n<p> Now go to branch B, in which you want that commit changes from A branch.</p>\n<p> git cherry-pick  It will commit and apply changes on branch B, from that commit.</p>\n<p> If you would like to make some further modifications,</p>\n<p> you can also instruct Git to only add the commit's changes to your Working Copy - without directly committing them:</p>\n<p> git cherry-pick --no-commit</p>\n","enclosure":{},"categories":[]},{"title":"Chrome Extensions I use","pubDate":"2023-04-18 20:30:31","link":"https://blogs.sravanth.co.uk/chrome-extensions-i-use","guid":"https://blogs.sravanth.co.uk/chrome-extensions-i-use","author":"Sravanth Baratam","thumbnail":"","description":"\n<table><tbody>\n<tr>\n<td><p>Calendly</p></td>\n<td><p>Schedule meetings without the hassle.</p></td>\n</tr>\n<tr>\n<td><p></p></td>\n<td><p></p></td>\n</tr>\n<tr>\n<td><p>ColorZilla</p></td>\n<td><p>Advanced Eyedropper, Color Picker, Gradient Generator and other colorful goodies</p></td>\n</tr>\n<tr>\n<td><p>CSS Peeper</p></td>\n<td><p>Extract CSS and build beautiful styleguides.</p></td>\n</tr>\n<tr>\n<td><p>CSS Used</p></td>\n<td><p>Get all css rules used by the selected DOM and its descendants.</p></td>\n</tr>\n<tr>\n<td><p>CSSViewer</p></td>\n<td><p>A simple CSS property viewer.</p></td>\n</tr>\n<tr>\n<td><p><a target=\"_blank\" href=\"http://daily.dev/\">daily.dev</a></p></td>\n<td><p><a target=\"_blank\" href=\"http://daily.dev/\">daily.dev</a> is a professional network for developers to learn, collaborate, and grow together.</p></td>\n</tr>\n<tr>\n<td><p>Desktop app for Google Tasks</p></td>\n<td><p>Standalone Desktop app for Google Tasks. Export and share your Google Tasks lists in one click.</p></td>\n</tr>\n<tr>\n<td><p>Fake Filler</p></td>\n<td><p>A form filler that fills all inputs on a page with fake/dummy data.</p></td>\n</tr>\n<tr>\n<td><p>FATRANK</p></td>\n<td><p>Google Chrome extension that checks the ranking for a particular keyword in Google and Bing for the website currently viewed.</p></td>\n</tr>\n<tr>\n<td><p>Fonts Ninja</p></td>\n<td><p>Speed up your design workflow!</p></td>\n</tr>\n<tr>\n<td><p>GoFullPage - Full Page Screen Capture</p></td>\n<td><p>Capture a screenshot of your current page in entirety and reliablywithout requesting any extra permissions!</p></td>\n</tr>\n<tr>\n<td><p>JSON Formatter</p></td>\n<td><p>Makes JSON easy to read. Open source.</p></td>\n</tr>\n<tr>\n<td><p>Keyword Surfer</p></td>\n<td><p>Keyword Surfer allows you to generate keyword ideas and see search volumes directly in Google search results.</p></td>\n</tr>\n<tr>\n<td><p>Keywords Everywhere - Keyword Tool</p></td>\n<td><p>Keyword search volume, cpc and competition for 15+ websites like Google Search Console, YouTube, Amazon &amp; more</p></td>\n</tr>\n<tr>\n<td><p>Lighthouse</p></td>\n<td><p>Lighthouse is an open-source, automated tool for improving the performance, quality, and correctness of your web apps.</p></td>\n</tr>\n<tr>\n<td><p>ModHeader - Modify HTTP headers</p></td>\n<td><p>Modify HTTP request headers, response headers, and redirect URLs</p></td>\n</tr>\n<tr>\n<td><p>Notion Web Clipper</p></td>\n<td><p>Use our Web Clipper to save any website into Notion.</p></td>\n</tr>\n<tr>\n<td><p>Print Friendly &amp; PDF</p></td>\n<td><p>Print Friendly and PDF any Webpage</p></td>\n</tr>\n<tr>\n<td><p>React Developer Tools</p></td>\n<td><p>Adds React debugging tools to the Chrome Developer Tools. Created from revision</p></td>\n</tr>\n<tr>\n<td><p>Read Aloud: A Text to Speech Voice Reader</p></td>\n<td><p>Read aloud the current web-page article with one click, using text to speech (TTS). Supports 40+ languages.</p></td>\n</tr>\n<tr>\n<td><p>Redux DevTools</p></td>\n<td><p>Redux DevTools for debugging application's state changes.</p></td>\n</tr>\n<tr>\n<td><p>Responsive Viewer</p></td>\n<td><p>Show multiple screens once, Responsive design tester</p></td>\n</tr>\n<tr>\n<td><p>Save to Pocket</p></td>\n<td><p>The easiest, fastest way to capture articles, videos, and more.</p></td>\n</tr>\n<tr>\n<td><p>Screenity - Screen Recorder &amp; Annotation Tool</p></td>\n<td><p>The most powerful screen recorder for Chrome. Capture, annotate, edit, and more.</p></td>\n</tr>\n<tr>\n<td><p>SEO META in 1 CLICK</p></td>\n<td><p>Displays all meta data and main SEO information for the best SEO</p></td>\n</tr>\n<tr>\n<td><p>SEO Minion</p></td>\n<td><p>SEO Minion helps you in your daily SEO tasks such as On-Page SEO analysis, Broken Link Checking, SERP Preview and more</p></td>\n</tr>\n<tr>\n<td><p>SEO Search Simulator by Nightwatch</p></td>\n<td><p>Simulate search engine queries from any location on Google and easily check and track your website or your competitor's rankings.</p></td>\n</tr>\n<tr>\n<td><p>SEOquake</p></td>\n<td><p>SEOquake is a free plugin that provides you with key SEO metrics, along with other useful tools such as SEO Audit and many others</p></td>\n</tr>\n<tr>\n<td><p>SERPTrends SEO Extension</p></td>\n<td><p>Shows dynamics on Google, Yahoo and Bing SERPs</p></td>\n</tr>\n<tr>\n<td><p>svg-grabber - get all the svg's from a site</p></td>\n<td><p>A tool to quickly preview and get all the svg assets from a website.</p></td>\n</tr>\n<tr>\n<td><p>Tag Assistant Companion</p></td>\n<td><p>The Tag Assistant Companion extension works with Tag Assistant to help troubleshoot</p></td>\n</tr>\n<tr>\n<td><p>Wappalyzer - Technology profiler</p></td>\n<td><p>Identify web technologies</p></td>\n</tr>\n<tr>\n<td><p>Web Developer</p></td>\n<td><p>Adds a toolbar button with various web developer tools.</p></td>\n</tr>\n<tr>\n<td><p>Email Tracker for Gmail, Mail Merge-Mailtrack</p></td>\n<td><p></p></td>\n</tr>\n<tr>\n<td><p>Loom  Screen Recorder &amp; Screen Capture</p></td>\n<td><p>Record your screen and camera with one click. Share that content in an instant with a link.</p></td>\n</tr>\n<tr>\n<td><p>Picture-in-Picture Extension (by Google)</p></td>\n<td><p>Watch video using Picture-in-Picture</p></td>\n</tr>\n<tr>\n<td><p>Toggl Track: Productivity &amp; Time Tracker</p></td>\n<td><p>Puts a timer into any web tool and allows quick real time productivity tracking with all the data stored on your Toggl account</p></td>\n</tr>\n<tr>\n<td><p>Text Blaze</p></td>\n<td><p>Create smart text expansions to get more done and streamline your work. Billions of keystrokes saved!</p></td>\n</tr>\n</tbody></table>\n<table><tbody><tr><td><p></p></td></tr></tbody></table>\n<table><tbody><tr><td><p></p></td></tr></tbody></table>\n<table><tbody><tr><td><p></p></td></tr></tbody></table>\n","content":"\n<table><tbody>\n<tr>\n<td><p>Calendly</p></td>\n<td><p>Schedule meetings without the hassle.</p></td>\n</tr>\n<tr>\n<td><p></p></td>\n<td><p></p></td>\n</tr>\n<tr>\n<td><p>ColorZilla</p></td>\n<td><p>Advanced Eyedropper, Color Picker, Gradient Generator and other colorful goodies</p></td>\n</tr>\n<tr>\n<td><p>CSS Peeper</p></td>\n<td><p>Extract CSS and build beautiful styleguides.</p></td>\n</tr>\n<tr>\n<td><p>CSS Used</p></td>\n<td><p>Get all css rules used by the selected DOM and its descendants.</p></td>\n</tr>\n<tr>\n<td><p>CSSViewer</p></td>\n<td><p>A simple CSS property viewer.</p></td>\n</tr>\n<tr>\n<td><p><a target=\"_blank\" href=\"http://daily.dev/\">daily.dev</a></p></td>\n<td><p><a target=\"_blank\" href=\"http://daily.dev/\">daily.dev</a> is a professional network for developers to learn, collaborate, and grow together.</p></td>\n</tr>\n<tr>\n<td><p>Desktop app for Google Tasks</p></td>\n<td><p>Standalone Desktop app for Google Tasks. Export and share your Google Tasks lists in one click.</p></td>\n</tr>\n<tr>\n<td><p>Fake Filler</p></td>\n<td><p>A form filler that fills all inputs on a page with fake/dummy data.</p></td>\n</tr>\n<tr>\n<td><p>FATRANK</p></td>\n<td><p>Google Chrome extension that checks the ranking for a particular keyword in Google and Bing for the website currently viewed.</p></td>\n</tr>\n<tr>\n<td><p>Fonts Ninja</p></td>\n<td><p>Speed up your design workflow!</p></td>\n</tr>\n<tr>\n<td><p>GoFullPage - Full Page Screen Capture</p></td>\n<td><p>Capture a screenshot of your current page in entirety and reliablywithout requesting any extra permissions!</p></td>\n</tr>\n<tr>\n<td><p>JSON Formatter</p></td>\n<td><p>Makes JSON easy to read. Open source.</p></td>\n</tr>\n<tr>\n<td><p>Keyword Surfer</p></td>\n<td><p>Keyword Surfer allows you to generate keyword ideas and see search volumes directly in Google search results.</p></td>\n</tr>\n<tr>\n<td><p>Keywords Everywhere - Keyword Tool</p></td>\n<td><p>Keyword search volume, cpc and competition for 15+ websites like Google Search Console, YouTube, Amazon &amp; more</p></td>\n</tr>\n<tr>\n<td><p>Lighthouse</p></td>\n<td><p>Lighthouse is an open-source, automated tool for improving the performance, quality, and correctness of your web apps.</p></td>\n</tr>\n<tr>\n<td><p>ModHeader - Modify HTTP headers</p></td>\n<td><p>Modify HTTP request headers, response headers, and redirect URLs</p></td>\n</tr>\n<tr>\n<td><p>Notion Web Clipper</p></td>\n<td><p>Use our Web Clipper to save any website into Notion.</p></td>\n</tr>\n<tr>\n<td><p>Print Friendly &amp; PDF</p></td>\n<td><p>Print Friendly and PDF any Webpage</p></td>\n</tr>\n<tr>\n<td><p>React Developer Tools</p></td>\n<td><p>Adds React debugging tools to the Chrome Developer Tools. Created from revision</p></td>\n</tr>\n<tr>\n<td><p>Read Aloud: A Text to Speech Voice Reader</p></td>\n<td><p>Read aloud the current web-page article with one click, using text to speech (TTS). Supports 40+ languages.</p></td>\n</tr>\n<tr>\n<td><p>Redux DevTools</p></td>\n<td><p>Redux DevTools for debugging application's state changes.</p></td>\n</tr>\n<tr>\n<td><p>Responsive Viewer</p></td>\n<td><p>Show multiple screens once, Responsive design tester</p></td>\n</tr>\n<tr>\n<td><p>Save to Pocket</p></td>\n<td><p>The easiest, fastest way to capture articles, videos, and more.</p></td>\n</tr>\n<tr>\n<td><p>Screenity - Screen Recorder &amp; Annotation Tool</p></td>\n<td><p>The most powerful screen recorder for Chrome. Capture, annotate, edit, and more.</p></td>\n</tr>\n<tr>\n<td><p>SEO META in 1 CLICK</p></td>\n<td><p>Displays all meta data and main SEO information for the best SEO</p></td>\n</tr>\n<tr>\n<td><p>SEO Minion</p></td>\n<td><p>SEO Minion helps you in your daily SEO tasks such as On-Page SEO analysis, Broken Link Checking, SERP Preview and more</p></td>\n</tr>\n<tr>\n<td><p>SEO Search Simulator by Nightwatch</p></td>\n<td><p>Simulate search engine queries from any location on Google and easily check and track your website or your competitor's rankings.</p></td>\n</tr>\n<tr>\n<td><p>SEOquake</p></td>\n<td><p>SEOquake is a free plugin that provides you with key SEO metrics, along with other useful tools such as SEO Audit and many others</p></td>\n</tr>\n<tr>\n<td><p>SERPTrends SEO Extension</p></td>\n<td><p>Shows dynamics on Google, Yahoo and Bing SERPs</p></td>\n</tr>\n<tr>\n<td><p>svg-grabber - get all the svg's from a site</p></td>\n<td><p>A tool to quickly preview and get all the svg assets from a website.</p></td>\n</tr>\n<tr>\n<td><p>Tag Assistant Companion</p></td>\n<td><p>The Tag Assistant Companion extension works with Tag Assistant to help troubleshoot</p></td>\n</tr>\n<tr>\n<td><p>Wappalyzer - Technology profiler</p></td>\n<td><p>Identify web technologies</p></td>\n</tr>\n<tr>\n<td><p>Web Developer</p></td>\n<td><p>Adds a toolbar button with various web developer tools.</p></td>\n</tr>\n<tr>\n<td><p>Email Tracker for Gmail, Mail Merge-Mailtrack</p></td>\n<td><p></p></td>\n</tr>\n<tr>\n<td><p>Loom  Screen Recorder &amp; Screen Capture</p></td>\n<td><p>Record your screen and camera with one click. Share that content in an instant with a link.</p></td>\n</tr>\n<tr>\n<td><p>Picture-in-Picture Extension (by Google)</p></td>\n<td><p>Watch video using Picture-in-Picture</p></td>\n</tr>\n<tr>\n<td><p>Toggl Track: Productivity &amp; Time Tracker</p></td>\n<td><p>Puts a timer into any web tool and allows quick real time productivity tracking with all the data stored on your Toggl account</p></td>\n</tr>\n<tr>\n<td><p>Text Blaze</p></td>\n<td><p>Create smart text expansions to get more done and streamline your work. Billions of keystrokes saved!</p></td>\n</tr>\n</tbody></table>\n<table><tbody><tr><td><p></p></td></tr></tbody></table>\n<table><tbody><tr><td><p></p></td></tr></tbody></table>\n<table><tbody><tr><td><p></p></td></tr></tbody></table>\n","enclosure":{},"categories":[]},{"title":"React Hooks part 1","pubDate":"2023-03-24 16:49:13","link":"https://blogs.sravanth.co.uk/react-hooks-part-1","guid":"https://blogs.sravanth.co.uk/react-hooks-part-1","author":"Sravanth Baratam","thumbnail":"","description":"\n<h1>useState and useEffect</h1>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n<span class=\"hljs-keyword\">import</span> { useState, useEffect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">WindowSizeList</span>(<span class=\"hljs-params\">{ url }</span>) </span>{\n    <span class=\"hljs-keyword\">const</span> [windowWidth, setWindowWidth] = useState(<span class=\"hljs-built_in\">window</span>.innerWidth)\n    <span class=\"hljs-keyword\">const</span> [items, setItems] = useState([])\n\n    <span class=\"hljs-keyword\">const</span> updateWindowWidth = <span class=\"hljs-function\">() =&gt;</span> {\n        setWindowWidth(<span class=\"hljs-built_in\">window</span>.innerWidth)\n    }\n\n    useEffect(<span class=\"hljs-function\">() =&gt;</span> {\n        setItems([<span class=\"hljs-string\">\"abcd\"</span>])\n    }, [url])\n\n    useEffect(<span class=\"hljs-function\">() =&gt;</span> {\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'This is my side effect'</span>)\n        <span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">'resize'</span>, updateWindowWidth)\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =&gt;</span> {\n            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'This is my clean up'</span>)  \n            <span class=\"hljs-built_in\">window</span>.removeEventListener(<span class=\"hljs-string\">'resize'</span>, updateWindowWidth)\n        }\n    }, [])\n\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>Window Width: {windowWidth}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n            {items.map(item =&gt; {\n                return <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{item}</span>&gt;</span>{item}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n            })}\n        <span class=\"hljs-tag\">&lt;/&gt;</span></span>\n    )\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> WindowSizeList\n</code></pre>\n<p>The first <code>useState</code> hook sets up a state variable called <code>windowWidth</code> and initializes it to the current width of the window using the <code>window.innerWidth</code> property. The second <code>useState</code> hook initializes an empty array called <code>items</code>.</p>\n<p>The <code>updateWindowWidth</code> function is used to update the <code>windowWidth</code> state variable whenever the window is resized. This function is called by an event listener attached to the window in the second <code>useEffect</code> hook.</p>\n<p>The first <code>useEffect</code> hook sets the <code>items</code> state variable to an array containing a single string \"abcd\". This effect is only executed when the <code>url</code> prop changes.</p>\n<p>The second <code>useEffect</code> hook is responsible for attaching and removing the event listener for window resizing. The effect function adds an event listener to the <code>resize</code> event of the window, and returns a cleanup function that removes the event listener when the component unmounts. The <code>[]</code> dependency array passed as the second argument to this <code>useEffect</code> hook ensures that the effect is only executed once when the component mounts.</p>\n<p>Finally, the component returns a JSX fragment that renders the current window width and a list of items, with each item rendered as a <code>&lt;div&gt;</code> element with a unique <code>key</code> prop.</p>\n<p>Overall, this component demonstrates how the <code>useState</code> and <code>useEffect</code> hooks can be used to manage state and side effects in a React component. It also shows how to attach and remove event listeners using the <code>useEffect</code> hook.</p>\n<hr>\n<h1>useContext</h1>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>\n<span class=\"hljs-keyword\">import</span> { useState, useContext } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>\n<span class=\"hljs-comment\">//context</span>\n<span class=\"hljs-keyword\">const</span> ThemeContext = React.createContext()\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">App</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">const</span> [theme, setTheme] = useState(<span class=\"hljs-string\">'dark'</span>)\n\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"hljs-comment\">// provider with obj with props theme and setTheme</span>\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ThemeContext.Provider</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">theme</span>, <span class=\"hljs-attr\">setTheme</span> }}&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ChildComponent</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ThemeContext.Provider</span>&gt;</span></span>\n    )\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">ChildComponent</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">GrandChildComponent</span> /&gt;</span></span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">GrandChildComponent</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">const</span> { theme, setTheme } = useContext(ThemeContext)\n\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>The theme is {theme}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> setTheme('light')}&gt;\n                Change To Light Theme\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/&gt;</span></span>\n    )\n}\n</code></pre>\n<p>The first step is to create a context object using the createContext() function from the React library. This creates a new context object that can be used to pass data down to child components.</p>\n<p>The App component is the parent component and contains the state variable \"theme\" which is initialized to 'dark' using the useState() hook from the React library. The App component also provides a child component, ChildComponent, with access to the theme state by wrapping it in the ThemeContext.Provider component.</p>\n<p>The ChildComponent is a simple component that renders a GrandChildComponent.</p>\n<p>The GrandChildComponent uses the useContext() hook from the React library to access the \"theme\" and \"setTheme\" variables from the context. It then renders a div that displays the current theme value and a button that changes the theme to \"light\" when clicked.</p>\n<p>Overall, this code shows how to use the React Context API to share state between components without the need for passing props down the component tree. It also demonstrates the power of the useContext() hook to access context values within child components.</p>\n","content":"\n<h1>useState and useEffect</h1>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n<span class=\"hljs-keyword\">import</span> { useState, useEffect } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>;\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">WindowSizeList</span>(<span class=\"hljs-params\">{ url }</span>) </span>{\n    <span class=\"hljs-keyword\">const</span> [windowWidth, setWindowWidth] = useState(<span class=\"hljs-built_in\">window</span>.innerWidth)\n    <span class=\"hljs-keyword\">const</span> [items, setItems] = useState([])\n\n    <span class=\"hljs-keyword\">const</span> updateWindowWidth = <span class=\"hljs-function\">() =&gt;</span> {\n        setWindowWidth(<span class=\"hljs-built_in\">window</span>.innerWidth)\n    }\n\n    useEffect(<span class=\"hljs-function\">() =&gt;</span> {\n        setItems([<span class=\"hljs-string\">\"abcd\"</span>])\n    }, [url])\n\n    useEffect(<span class=\"hljs-function\">() =&gt;</span> {\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'This is my side effect'</span>)\n        <span class=\"hljs-built_in\">window</span>.addEventListener(<span class=\"hljs-string\">'resize'</span>, updateWindowWidth)\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-function\">() =&gt;</span> {\n            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'This is my clean up'</span>)  \n            <span class=\"hljs-built_in\">window</span>.removeEventListener(<span class=\"hljs-string\">'resize'</span>, updateWindowWidth)\n        }\n    }, [])\n\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>Window Width: {windowWidth}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n            {items.map(item =&gt; {\n                return <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">key</span>=<span class=\"hljs-string\">{item}</span>&gt;</span>{item}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n            })}\n        <span class=\"hljs-tag\">&lt;/&gt;</span></span>\n    )\n}\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> WindowSizeList\n</code></pre>\n<p>The first <code>useState</code> hook sets up a state variable called <code>windowWidth</code> and initializes it to the current width of the window using the <code>window.innerWidth</code> property. The second <code>useState</code> hook initializes an empty array called <code>items</code>.</p>\n<p>The <code>updateWindowWidth</code> function is used to update the <code>windowWidth</code> state variable whenever the window is resized. This function is called by an event listener attached to the window in the second <code>useEffect</code> hook.</p>\n<p>The first <code>useEffect</code> hook sets the <code>items</code> state variable to an array containing a single string \"abcd\". This effect is only executed when the <code>url</code> prop changes.</p>\n<p>The second <code>useEffect</code> hook is responsible for attaching and removing the event listener for window resizing. The effect function adds an event listener to the <code>resize</code> event of the window, and returns a cleanup function that removes the event listener when the component unmounts. The <code>[]</code> dependency array passed as the second argument to this <code>useEffect</code> hook ensures that the effect is only executed once when the component mounts.</p>\n<p>Finally, the component returns a JSX fragment that renders the current window width and a list of items, with each item rendered as a <code>&lt;div&gt;</code> element with a unique <code>key</code> prop.</p>\n<p>Overall, this component demonstrates how the <code>useState</code> and <code>useEffect</code> hooks can be used to manage state and side effects in a React component. It also shows how to attach and remove event listeners using the <code>useEffect</code> hook.</p>\n<hr>\n<h1>useContext</h1>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">import</span> React <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>\n<span class=\"hljs-keyword\">import</span> { useState, useContext } <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"react\"</span>\n<span class=\"hljs-comment\">//context</span>\n<span class=\"hljs-keyword\">const</span> ThemeContext = React.createContext()\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">App</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">const</span> [theme, setTheme] = useState(<span class=\"hljs-string\">'dark'</span>)\n\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"hljs-comment\">// provider with obj with props theme and setTheme</span>\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ThemeContext.Provider</span> <span class=\"hljs-attr\">value</span>=<span class=\"hljs-string\">{{</span> <span class=\"hljs-attr\">theme</span>, <span class=\"hljs-attr\">setTheme</span> }}&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ChildComponent</span> /&gt;</span>\n        <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ThemeContext.Provider</span>&gt;</span></span>\n    )\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">ChildComponent</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">return</span> <span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">GrandChildComponent</span> /&gt;</span></span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">GrandChildComponent</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">const</span> { theme, setTheme } = useContext(ThemeContext)\n\n    <span class=\"hljs-keyword\">return</span> (\n        <span class=\"xml\"><span class=\"hljs-tag\">&lt;&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span>The theme is {theme}<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n            <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> <span class=\"hljs-attr\">onClick</span>=<span class=\"hljs-string\">{()</span> =&gt;</span> setTheme('light')}&gt;\n                Change To Light Theme\n            <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;/&gt;</span></span>\n    )\n}\n</code></pre>\n<p>The first step is to create a context object using the createContext() function from the React library. This creates a new context object that can be used to pass data down to child components.</p>\n<p>The App component is the parent component and contains the state variable \"theme\" which is initialized to 'dark' using the useState() hook from the React library. The App component also provides a child component, ChildComponent, with access to the theme state by wrapping it in the ThemeContext.Provider component.</p>\n<p>The ChildComponent is a simple component that renders a GrandChildComponent.</p>\n<p>The GrandChildComponent uses the useContext() hook from the React library to access the \"theme\" and \"setTheme\" variables from the context. It then renders a div that displays the current theme value and a button that changes the theme to \"light\" when clicked.</p>\n<p>Overall, this code shows how to use the React Context API to share state between components without the need for passing props down the component tree. It also demonstrates the power of the useContext() hook to access context values within child components.</p>\n","enclosure":{},"categories":[]},{"title":"JS Mini Challenges Week 1","pubDate":"2023-03-23 23:15:25","link":"https://blogs.sravanth.co.uk/js-mini-challenges-week-1","guid":"https://blogs.sravanth.co.uk/js-mini-challenges-week-1","author":"Sravanth Baratam","thumbnail":"","description":"\n<h3>Guess the outputs without executing the code</h3>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-keyword\">var</span> args = <span class=\"hljs-built_in\">Array</span>.prototype.slice.call(<span class=\"hljs-built_in\">arguments</span>);\n    <span class=\"hljs-built_in\">console</span>.log(args[<span class=\"hljs-number\">1</span>])\n}\nfoo(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">4</span>) <span class=\"hljs-comment\">//?</span>\n</code></pre>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">const</span> obj1 = {\n    <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">5</span>,\n    <span class=\"hljs-attr\">b</span>: {\n        <span class=\"hljs-attr\">c</span>: <span class=\"hljs-number\">6</span>\n    }\n}\n\n<span class=\"hljs-keyword\">const</span> obj2 = <span class=\"hljs-built_in\">Object</span>.assign({}, obj1)\n<span class=\"hljs-keyword\">const</span> obj3 = { ...obj1 }\nobj1.b.c = <span class=\"hljs-number\">8</span>\n<span class=\"hljs-built_in\">console</span>.log(obj2)  <span class=\"hljs-comment\">//?</span>\n<span class=\"hljs-built_in\">console</span>.log(obj3)  <span class=\"hljs-comment\">//?</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.assign({}, obj1, obj2, obj3)) <span class=\"hljs-comment\">//?</span>\n</code></pre>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-literal\">null</span> == <span class=\"hljs-literal\">undefined</span>) <span class=\"hljs-comment\">//?</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-literal\">null</span> === <span class=\"hljs-literal\">undefined</span>) <span class=\"hljs-comment\">//?</span>\n</code></pre>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">var</span> power = <span class=\"hljs-string\">\"100\"</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getPowerNumber</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">var</span> power = <span class=\"hljs-string\">\"10\"</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">f</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> power\n    }\n    <span class=\"hljs-keyword\">return</span> f\n}\n<span class=\"hljs-built_in\">console</span>.log(getPowerNumber()()) <span class=\"hljs-comment\">//?</span>\n</code></pre>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">var</span> obj = { <span class=\"hljs-attr\">hasOwnProperty</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">foo</span>: <span class=\"hljs-number\">2</span> }\n<span class=\"hljs-built_in\">console</span>.log(obj.hasOwnProperty(<span class=\"hljs-string\">'foo'</span>)) <span class=\"hljs-comment\">//?</span>\n</code></pre>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">person</span>(<span class=\"hljs-params\">id, name</span>) </span>{\n    <span class=\"hljs-keyword\">var</span> id = id\n    <span class=\"hljs-keyword\">var</span> name = name\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">student</span>(<span class=\"hljs-params\">id, name</span>) </span>{\n    person.call(<span class=\"hljs-built_in\">this</span>, id, name)\n}\n\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> student(<span class=\"hljs-number\">50</span>, <span class=\"hljs-string\">\"Sravanth\"</span>).id);<span class=\"hljs-comment\">//?</span>\n</code></pre>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Boolean</span>(<span class=\"hljs-string\">\"false\"</span>) === <span class=\"hljs-built_in\">Boolean</span>(<span class=\"hljs-literal\">false</span>)); <span class=\"hljs-comment\">//?</span>\n</code></pre>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">let</span> foo = <span class=\"hljs-function\">(<span class=\"hljs-params\">a = <span class=\"hljs-number\">3</span>, b = <span class=\"hljs-number\">5</span></span>) =&gt;</span> {\n    <span class=\"hljs-built_in\">console</span>.log(a + b);\n}\n\nfoo(<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">4</span>) <span class=\"hljs-comment\">//?</span>\n</code></pre>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(a); <span class=\"hljs-comment\">//?</span>\n    <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">4</span>;\n    <span class=\"hljs-built_in\">console</span>.log(a); <span class=\"hljs-comment\">//?</span>\n}\n\nfoo()\n</code></pre>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(a); <span class=\"hljs-comment\">//?</span>\n    <span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-number\">4</span>;\n    <span class=\"hljs-built_in\">console</span>.log(a); <span class=\"hljs-comment\">//?</span>\n}\n\nfoo()\n</code></pre>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">const</span> first = <span class=\"hljs-number\">6</span> * <span class=\"hljs-string\">\"JS\"</span>;\n<span class=\"hljs-keyword\">const</span> second = <span class=\"hljs-number\">6</span> * <span class=\"hljs-string\">\"JS\"</span>;\n<span class=\"hljs-built_in\">console</span>.log(first !== second )<span class=\"hljs-comment\">//?</span>\n\n<span class=\"hljs-comment\">// Answer: </span>\n<span class=\"hljs-comment\">//In the lines number 9 and 10, a number is multiplied by a string which will return </span>\n<span class=\"hljs-comment\">//NaN. Since NaN(not a number) is not equal to anything, not even itself; //true will be </span>\n<span class=\"hljs-comment\">//logged to the console.</span>\n</code></pre>\n","content":"\n<h3>Guess the outputs without executing the code</h3>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">var</span> foo = <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n    <span class=\"hljs-keyword\">var</span> args = <span class=\"hljs-built_in\">Array</span>.prototype.slice.call(<span class=\"hljs-built_in\">arguments</span>);\n    <span class=\"hljs-built_in\">console</span>.log(args[<span class=\"hljs-number\">1</span>])\n}\nfoo(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">4</span>) <span class=\"hljs-comment\">//?</span>\n</code></pre>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">const</span> obj1 = {\n    <span class=\"hljs-attr\">a</span>: <span class=\"hljs-number\">5</span>,\n    <span class=\"hljs-attr\">b</span>: {\n        <span class=\"hljs-attr\">c</span>: <span class=\"hljs-number\">6</span>\n    }\n}\n\n<span class=\"hljs-keyword\">const</span> obj2 = <span class=\"hljs-built_in\">Object</span>.assign({}, obj1)\n<span class=\"hljs-keyword\">const</span> obj3 = { ...obj1 }\nobj1.b.c = <span class=\"hljs-number\">8</span>\n<span class=\"hljs-built_in\">console</span>.log(obj2)  <span class=\"hljs-comment\">//?</span>\n<span class=\"hljs-built_in\">console</span>.log(obj3)  <span class=\"hljs-comment\">//?</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Object</span>.assign({}, obj1, obj2, obj3)) <span class=\"hljs-comment\">//?</span>\n</code></pre>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-literal\">null</span> == <span class=\"hljs-literal\">undefined</span>) <span class=\"hljs-comment\">//?</span>\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-literal\">null</span> === <span class=\"hljs-literal\">undefined</span>) <span class=\"hljs-comment\">//?</span>\n</code></pre>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">var</span> power = <span class=\"hljs-string\">\"100\"</span>\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">getPowerNumber</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-keyword\">var</span> power = <span class=\"hljs-string\">\"10\"</span>\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">f</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> power\n    }\n    <span class=\"hljs-keyword\">return</span> f\n}\n<span class=\"hljs-built_in\">console</span>.log(getPowerNumber()()) <span class=\"hljs-comment\">//?</span>\n</code></pre>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">var</span> obj = { <span class=\"hljs-attr\">hasOwnProperty</span>: <span class=\"hljs-number\">1</span>, <span class=\"hljs-attr\">foo</span>: <span class=\"hljs-number\">2</span> }\n<span class=\"hljs-built_in\">console</span>.log(obj.hasOwnProperty(<span class=\"hljs-string\">'foo'</span>)) <span class=\"hljs-comment\">//?</span>\n</code></pre>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">person</span>(<span class=\"hljs-params\">id, name</span>) </span>{\n    <span class=\"hljs-keyword\">var</span> id = id\n    <span class=\"hljs-keyword\">var</span> name = name\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">student</span>(<span class=\"hljs-params\">id, name</span>) </span>{\n    person.call(<span class=\"hljs-built_in\">this</span>, id, name)\n}\n\n<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-keyword\">new</span> student(<span class=\"hljs-number\">50</span>, <span class=\"hljs-string\">\"Sravanth\"</span>).id);<span class=\"hljs-comment\">//?</span>\n</code></pre>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">Boolean</span>(<span class=\"hljs-string\">\"false\"</span>) === <span class=\"hljs-built_in\">Boolean</span>(<span class=\"hljs-literal\">false</span>)); <span class=\"hljs-comment\">//?</span>\n</code></pre>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">let</span> foo = <span class=\"hljs-function\">(<span class=\"hljs-params\">a = <span class=\"hljs-number\">3</span>, b = <span class=\"hljs-number\">5</span></span>) =&gt;</span> {\n    <span class=\"hljs-built_in\">console</span>.log(a + b);\n}\n\nfoo(<span class=\"hljs-number\">7</span>, <span class=\"hljs-number\">4</span>) <span class=\"hljs-comment\">//?</span>\n</code></pre>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(a); <span class=\"hljs-comment\">//?</span>\n    <span class=\"hljs-keyword\">var</span> a = <span class=\"hljs-number\">4</span>;\n    <span class=\"hljs-built_in\">console</span>.log(a); <span class=\"hljs-comment\">//?</span>\n}\n\nfoo()\n</code></pre>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">foo</span>(<span class=\"hljs-params\"></span>) </span>{\n    <span class=\"hljs-built_in\">console</span>.log(a); <span class=\"hljs-comment\">//?</span>\n    <span class=\"hljs-keyword\">let</span> a = <span class=\"hljs-number\">4</span>;\n    <span class=\"hljs-built_in\">console</span>.log(a); <span class=\"hljs-comment\">//?</span>\n}\n\nfoo()\n</code></pre>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">const</span> first = <span class=\"hljs-number\">6</span> * <span class=\"hljs-string\">\"JS\"</span>;\n<span class=\"hljs-keyword\">const</span> second = <span class=\"hljs-number\">6</span> * <span class=\"hljs-string\">\"JS\"</span>;\n<span class=\"hljs-built_in\">console</span>.log(first !== second )<span class=\"hljs-comment\">//?</span>\n\n<span class=\"hljs-comment\">// Answer: </span>\n<span class=\"hljs-comment\">//In the lines number 9 and 10, a number is multiplied by a string which will return </span>\n<span class=\"hljs-comment\">//NaN. Since NaN(not a number) is not equal to anything, not even itself; //true will be </span>\n<span class=\"hljs-comment\">//logged to the console.</span>\n</code></pre>\n","enclosure":{},"categories":[]},{"title":"Things to remember about JavaScript ForEach Loop","pubDate":"2023-03-22 15:47:01","link":"https://blogs.sravanth.co.uk/things-to-remember-about-javascript-foreach-loop","guid":"https://blogs.sravanth.co.uk/things-to-remember-about-javascript-foreach-loop","author":"Sravanth Baratam","thumbnail":"","description":"\n<p><strong>Cant Skip an Iteration with \"Continue\"</strong></p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>]\n\narr.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">val</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (val === <span class=\"hljs-number\">3</span>) {\n        <span class=\"hljs-keyword\">continue</span>;\n    }\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"current: \"</span>, val)\n}\n)\n<span class=\"hljs-comment\">// SyntaxError: Unsyntactic continue</span>\n</code></pre>\n<p><strong>Cant End A Loop Early with \"Break\"</strong></p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>]\n\narr.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">val</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (val === <span class=\"hljs-number\">3</span>) {\n        <span class=\"hljs-keyword\">break</span>;\n    }\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"current: \"</span>, val)\n}\n)\n<span class=\"hljs-comment\">// SyntaxError: Unsyntactic break</span>\n</code></pre>\n<p><strong>Always Returns \"Undefined\"</strong></p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>]\n\narr.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">val</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (val === <span class=\"hljs-number\">3</span>) {\n        <span class=\"hljs-keyword\">return</span> val;\n    }\n}\n)\n<span class=\"hljs-comment\">//Undefined</span>\n</code></pre>\n","content":"\n<p><strong>Cant Skip an Iteration with \"Continue\"</strong></p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>]\n\narr.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">val</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (val === <span class=\"hljs-number\">3</span>) {\n        <span class=\"hljs-keyword\">continue</span>;\n    }\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"current: \"</span>, val)\n}\n)\n<span class=\"hljs-comment\">// SyntaxError: Unsyntactic continue</span>\n</code></pre>\n<p><strong>Cant End A Loop Early with \"Break\"</strong></p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>]\n\narr.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">val</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (val === <span class=\"hljs-number\">3</span>) {\n        <span class=\"hljs-keyword\">break</span>;\n    }\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"current: \"</span>, val)\n}\n)\n<span class=\"hljs-comment\">// SyntaxError: Unsyntactic break</span>\n</code></pre>\n<p><strong>Always Returns \"Undefined\"</strong></p>\n<pre><code class=\"lang-javascript\"><span class=\"hljs-keyword\">const</span> arr = [<span class=\"hljs-number\">1</span>, <span class=\"hljs-number\">2</span>, <span class=\"hljs-number\">3</span>, <span class=\"hljs-number\">4</span>, <span class=\"hljs-number\">5</span>, <span class=\"hljs-number\">6</span>, <span class=\"hljs-number\">7</span>]\n\narr.forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">val</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">if</span> (val === <span class=\"hljs-number\">3</span>) {\n        <span class=\"hljs-keyword\">return</span> val;\n    }\n}\n)\n<span class=\"hljs-comment\">//Undefined</span>\n</code></pre>\n","enclosure":{},"categories":[]}]}